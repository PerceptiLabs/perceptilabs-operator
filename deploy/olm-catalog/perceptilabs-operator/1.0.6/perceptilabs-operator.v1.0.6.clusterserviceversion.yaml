apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: '[{"apiVersion":"perceptilabs.com/v1","kind":"PerceptiLabs","metadata":{"name":"example-perceptilabs"},"spec":{"namespace":"your-namespace","corePvc":"perceptilabs-pvc","coreGpus":0,"license_name":"demo","license_value":"demo"}}]'
    capabilities: Basic Install
    categories: AI/Machine Learning
    certified: "false"
    containerImage: quay.io/perceptilabs/perceptilabs-operator
    createdAt: "2019-10-02T12:00:00Z"
    description: AI platform which lets you Build, Train and Analyze
    support: support@perceptilabs.com
  name: perceptilabs-operator.v1.0.6
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: The PerceptiLabs Modeling tool
      displayName: PerceptiLabs
      kind: PerceptiLabs
      name: perceptilabs.perceptilabs.com
      version: v1
  description: "The PerceptiLabs operator creates and maintains PerceptiLabs, a visual
    tool modeling for machine learning at warp speed.\n\nPerceptiLabs visual modeling
    tool provides a GUI for building,\ntraining, and assessing your models, while
    also enabling deeper\ndevelopment with code. You get faster iterations and better\nexplainability
    of your results.\n\nFor more information visit [http://perceptilabs.com](http://perceptilabs.com).\n\n#
    Features\n\n**Fast modeling**  \nMake changes, debug, and tune your model through
    the GUI of custom code\neditor where every component/layer is reprogrammable.
    Choose from\nmultiple neural network models as well as classical AI methods.\n\n\n**Transparency
    of Model Performance and Results**  \nGet instant feedback about your model's
    performance through the\nvisualization of the architecture, to better review and
    understand the\nresults. See real-time analytics in every operation and variable,
    and\ngranular previews of output from each model component.\n\n\n**Flexibility**
    \ \nCustomize your environment and statistics dashboard. Use high-level\nabstractions
    or low-level code. Execute any custom Python code or export\na fully trained TensorFlow
    model to perform inference in your projects.\n\n\n\n# Installation Instructions
    \ \nFor your convenience, we've included an example quickstart for running PerceptiLabs
    in demo mode.\n\n## Prepare your namespace  \nChoose or create the namespace into
    which you'd like install PerceptiLabs. For example:  \n```\noc create namespace
    REPLACE_NAMESPACE\n```\n\n## Prepare storage for your data\n\nYou'll need to have
    a place on your cluster for storing training data and models.\n\nHere's an example
    configuration for creating storage on a cluster hosted on AWS that you can tailor
    to your needs:\n\n```\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n
    \ name: perceptilabs-example-sc\n  annotations:\n    description: Example Storage
    for PerceptiLabs\nprovisioner: kubernetes.io/aws-ebs\nparameters:\n  fsType: ext4\n
    \ type: gp2\nreclaimPolicy: Delete\nvolumeBindingMode: Immediate\n---\nkind: PersistentVolumeClaim\napiVersion:
    v1\nmetadata:\n  name: REPLACE_PVC_NAME\n  namespace: REPLACE_NAMESPACE\nspec:\n
    \ storageClassName: perceptilabs-example-sc\n  volumeMode: Filesystem\n  accessModes:\n
    \   - ReadWriteOnce\n  resources:\n    requests:\n      storage: 50Gi\n```\n\n##
    Create the service account\n\nChoose or create a service account to run PerceptiLabs.
    If you want a new service account, create it like so:\n\n```\napiVersion: v1\nkind:
    ServiceAccount\nmetadata:\n  name: REPLACE_SERVICEACCOUNT_NAME\n  namespace: REPLACE_NAMESPACE\n```\n\n##
    Subscribe to the PerceptiLabs operator in your namespace\n\nIf you're using the
    OpenShift console webpage, just click the Install button on this operator. If
    not, you can customize and apply this configuration:\n\n```\napiVersion: operators.coreos.com/v1\nkind:
    OperatorGroup\nmetadata:\n  name: REPLACE_NAMESPACE-operatorgroup\n  namespace:
    REPLACE_NAMESPACE\nspec:\n  targetNamespaces:\n  - REPLACE_NAMESPACE\n---\napiVersion:
    operators.coreos.com/v1alpha1\nkind: Subscription\nmetadata:\n  name: perceptilabs-operator\n
    \ namespace: REPLACE_NAMESPACE\nspec:\n  channel: stable\n  name: perceptilabs-operator-package\n
    \ source: perceptilabs-operators\n  sourceNamespace: openshift-marketplace\n  namespace:
    REPLACE_NAMESPACE\n```\n\nAfter this, you should see a `perceptilabs-operator`
    pod start up in your namespace. In that pod, the log for the `operator` container
    should eventually say \"starting to serve\".\n\n## Start a copy of PerceptiLabs\n\nThis
    is where you connect your storage and service account to a PerceptiLabs instance
    and run it. You can customize and apply the following configuration:\n\n```\napiVersion:
    perceptilabs.com/v1\nkind: PerceptiLabs\nmetadata:\n  name: example-perceptilabs\n
    \ namespace: REPLACE_NAMESPACE\nspec:\n  serviceAccountName: default
    \ namespace: REPLACE_NAMESPACE\n  corePvc: REPLACE_PVC_NAME\n```\n\nAt this point
    two pods named 'perceptilabs-core-...' and 'perceptilabs-frontend-...` will start
    up in your namespace.\n\n## Copy data files to your cluster\n\nIf you've used
    the persistent storage configuration from above, then you have a read-write volume
    mounted in the pod at `/mnt/plabs`. Copy your files there:\n\n```\noc cp REPLACE_FILENAME
    --namespace=REPLACE_NAMESPACE REPLACE_CORE_POD_NAME:/mnt/plabs --container=core\n```\n\n##
    Get the URL of your PerceptiLabs\n\nOnce everything is up and running, you'll
    have two new routes in your namespace. Go to the routes for your namespace and
    follow the link named `perceptilabs-frontend`. Your browser will be connected
    to your instance of PerceptiLabs! Alternatively, you can get the URL from the
    command line:\n\n```\noc get routes --namespace REPLACE_NAMESPACE perceptilabs-frontend\n```"
  displayName: PerceptiLabs Operator
  icon:
  - base64data: 
    mediatype: image/jpeg
  install:
    spec:
      deployments:
      - name: perceptilabs-operator
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: perceptilabs-operator
          strategy: {}
          template:
            metadata:
              labels:
                name: perceptilabs-operator
            spec:
              containers:
              - command:
                - /usr/local/bin/ao-logs
                - /tmp/ansible-operator/runner
                - stdout
                image: quay.io/perceptilabs/perceptilabs-operator:v1.0.6
                imagePullPolicy: Always
                name: ansible
                resources: {}
                volumeMounts:
                - mountPath: /tmp/ansible-operator/runner
                  name: runner
                  readOnly: true
              - env:
                - name: WATCH_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: OPERATOR_NAME
                  value: perceptilabs-operator
                - name: RELATED_IMAGE_FRONTEND_IMAGE
                  value: quay.io/perceptilabs/frontend-ubi8:901
                - name: RELATED_IMAGE_CORE_IMAGE
                  value: quay.io/perceptilabs/core-ubi7:901
                image: quay.io/perceptilabs/perceptilabs-operator:v1.0.6
                imagePullPolicy: Always
                name: operator
                resources: {}
                volumeMounts:
                - mountPath: /tmp/ansible-operator/runner
                  name: runner
              imagePullSecrets:
              - name: perceptilabs-docker
              serviceAccountName: default
              volumes:
              - emptyDir: {}
                name: runner
      permissions:
      - rules:
        - apiGroups:
          - route.openshift.io
          resources:
          - routes
          verbs:
          - '*'
        - apiGroups:
          - extensions
          resources:
          - deployments
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - '*'
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - apps
          resourceNames:
          - perceptilabs-operator
          resources:
          - deployments/finalizers
          verbs:
          - update
        - apiGroups:
          - ""
          resources:
          - pods
          verbs:
          - get
        - apiGroups:
          - apps
          resources:
          - replicasets
          verbs:
          - get
        - apiGroups:
          - perceptilabs.com
          resources:
          - '*'
          verbs:
          - '*'
        serviceAccountName: default
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - AI
  - Machine Learning
  - Platform
  - Drag and Drop
  links:
  - name: PerceptiLabs Webpage
    url: https://perceptilabs.com
  maintainers:
  - email: support@perceptilabs.com
    name: PerceptiLabs
  maturity: alpha
  provider:
    name: PerceptiLabs
  replaces: perceptilabs-operator.v1.0.5
  version: 1.0.6
