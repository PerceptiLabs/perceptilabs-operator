#!/usr/bin/env bash

if [ $# -lt 4 ]; then
  echo missing arguments
  echo USAGE: $0 old-version new-version operator-repo operator-app-name
  echo Example: $0 0.0.3 0.0.4 quay.io/perceptilabs/perceptilabs-operator perceptilabs-operator
  exit 1
fi

OLDVERSION=$1                                                                          # e.g. 1.0.0
NEWVERSION=$2                                                                          # e.g. 1.0.1
OPERATOR_REPO=$3                                                                       # e.g. quay.io/perceptilabs/perceptilabs-operator
APP_NAME=$4                                                                            # e.g. perceptilabs-operator
APP_DIR=deploy/olm-catalog/${APP_NAME}                                                 # e.g. deploy/olm-catalog/perceptilabs-operator
NEW_VERSION_DIR=${APP_DIR}/${NEWVERSION}                                               # e.g. deploy/olm-catalog/perceptilabs-operator/0.0.3
NEW_APP_NAME=${APP_NAME}.v${NEWVERSION}                                                # e.g. perceptilabs-operator.v0.0.3
NEW_CSV=${NEW_VERSION_DIR}/${NEW_APP_NAME}.clusterserviceversion.yaml                  # e.g. deploy/olm-catalog/perceptilabs-operator/0.0.3/perceptilabs-operator.v0.0.3
CORE_IMAGE=quay.io/perceptilabs/core-ubi7:${NEWVERSION}                                # e.g. quay.io/perceptilabs/core-ubi7:0.0.3
FRONTEND_IMAGE=quay.io/perceptilabs/frontend-ubi8:${NEWVERSION}                        # e.g. quay.io/perceptilabs/frontend-ubi8:0.0.3
OLD_CSV=${APP_DIR}/${OLDVERSION}/${APP_NAME}.v${OLDVERSION}.clusterserviceversion.yaml # e.g. deploy/olm-catalog/perceptilabs-operator/0.0.2/perceptilabs-operator.v0.0.2
PACKAGE_FILE=${APP_DIR}/perceptilabs-operator.package.yaml                             # e.g. deploy/olm-catalog/perceptilabs-operator/perceptilabs-operator.package.yaml
DOCKERFILE=build/Dockerfile
PACKAGE_NAME=perceptilabs-operator-package

# Prevent accidental overwrites
if [ -f "${NEW_CSV}" ]; then
  echo "The new csv already exists at ${NEW_CSV}"
  read -s -p "Overwrite it? [y/N] " RESPONSE
  if [ "${RESPONSE}" != 'y' ]; then exit 0; fi
fi

# Insist on a previous version, since operator-sdk will happily work without one and make a mess
if [ ! -f ${OLD_CSV} ]; then
  echo "Old csv isn't there. Expected ${OLD_CSV} to exist"
  exit 1
fi

# some pre-build updates
yq write --inplace ${PACKAGE_FILE} channels[0].currentCSV ${NEW_APP_NAME} || { exit 1; }

# Make the version
operator-sdk generate csv --from-version=${OLDVERSION} --csv-version=${NEWVERSION} --operator-name=${APP_NAME} --csv-channel=stable --default-channel=true || { exit 1; }

yq write --inplace ${PACKAGE_FILE} packageName ${PACKAGE_NAME}

# operator-courier checks that the crd is in the same directory as the csv. Link it there.
pushd ${NEW_VERSION_DIR}
ln -fs ../../../crds/perceptilabs_v1_perceptilabs_crd.yaml perceptilabs_v1_perceptilabs_crd.yaml || { exit 1; }
popd

# operator-sdk puts an extra placeholder namespace in. Remove it.
yq delete --inplace ${NEW_CSV} metadata.namespace || { exit 1; }

# operator-sdk doesn't fill in the customresourcedefinitions section. Add it.
patch_file=$(dirname $0)/crd_patch.yaml
yq merge --overwrite --inplace ${NEW_CSV} ${patch_file} || { exit 1; }

# operator-sdk doesn't fill in the alm-example section. Add it.
patch_file=$(dirname $0)/alm_example.json
example_json=$(jq --compact-output . ${patch_file})
yq write --inplace ${NEW_CSV} metadata.annotations.alm-examples ${example_json} || { exit 1; }

patch_file=$(dirname $0)/description.md
description=$(cat ${patch_file})

yq write --inplace ${NEW_CSV} spec.description "${description}" || { exit 1; }

# operator-sdk pulls in the contents of deploy/operator.yaml, but we have placeholders in there
# deploy/operator.yaml includes placeholders that need to be updated
sed -i "" "s|REPLACE_IMAGE|${OPERATOR_REPO}:${NEWVERSION}|g" ${NEW_CSV} || { exit 1; }
sed -i "" "s|REPLACE_CORE_IMAGE|${CORE_IMAGE}|g" ${NEW_CSV} || { exit 1; }
sed -i "" "s|REPLACE_FRONTEND_IMAGE|${FRONTEND_IMAGE}|g" ${NEW_CSV} || { exit 1; }
sed -i "" "s|REPLACE_OP|${APP_NAME}|g" ${NEW_CSV} || { exit 1; }

# we want the default service account.
sed -i "" "s/serviceAccountName.*$/serviceAccountName: default/g" ${NEW_CSV} || { exit 1; }

# put the new version in the Dockerfile
sed -i "" "s|version=.*$|version=\"${NEWVERSION}\" \\\|g" ${DOCKERFILE} || { exit 1; }
