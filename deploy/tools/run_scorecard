#!/usr/bin/env bash

if [ $# -ne 2 ]; then
  echo "USAGE: $0 <version> <operator name>"
  exit 1
fi

VERSION=$1
NAME=$2

DEST=scorecard-${NAME}-${VERSION}
CSV=deploy/olm-catalog/perceptilabs-operator/${VERSION}/perceptilabs-operator.v${VERSION}.clusterserviceversion.yaml
OP_IMAGE=quay.io/perceptilabs/perceptilabs-operator:${VERSION}
CORE_IMAGE=quay.io/perceptilabs/core-ubi7:${VERSION}
FRONTEND_IMAGE=quay.io/perceptilabs/frontend-ubi8:${VERSION}
OPERATOR=${DEST}/deploy/operator.yaml

rm -rf ${DEST}
mkdir ${DEST}
mkdir ${DEST}/deploy
cp -r deploy/crds ${DEST}
cp deploy/perceptilabs_cr.yaml ${DEST}
cp ${CSV} ${DEST}/csv.yaml

# The operator file is a template. We have to give it the real values.
cp deploy/operator.yaml ${OPERATOR}
yq w --inplace ${OPERATOR} metadata.name ${NAME}
yq w --inplace ${OPERATOR} spec.selector.matchLabels.name ${NAME}
yq w --inplace ${OPERATOR} spec.template.metadata.labels.name ${NAME}
yq w --inplace ${OPERATOR} 'spec.template.spec.containers.(name==operator).env.(name==OPERATOR_NAME).value' ${NAME}
yq w --inplace ${OPERATOR} 'spec.template.spec.containers.(name==operator).env.(name==RELATED_IMAGE_FRONTEND_IMAGE).value' ${FRONTEND_IMAGE}
yq w --inplace ${OPERATOR} 'spec.template.spec.containers.(name==operator).env.(name==RELATED_IMAGE_CORE_IMAGE).value' ${CORE_IMAGE}
yq w --inplace ${OPERATOR} 'spec.template.spec.containers.*.image' ${OP_IMAGE}
yq w --inplace ${OPERATOR} 'spec.template.spec.serviceAccountName' perceptilabs-operator-sa

# Set up the scorecard config
CONFIG=${DEST}/.osdk-scorecard.yaml
cat > ${CONFIG} <<EOF
scorecard:
  plugins:
    - basic:
        cr-manifest:
          - "perceptilabs_cr.yaml"
        crds-dir: "crds"
EOF

# Running the scorecard proxy container in the pod means it needs a service account beyond default. Set that up now.
cat > ${DEST}/deploy/service_account.yaml <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: perceptilabs-operator-sa
EOF

# Running with the scorecard proxy seems to require a lot of permissions that you don't normally need. Here they are.
cat > ${DEST}/deploy/role.yaml <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: perceptilabs-operator
rules:
- apiGroups:
  - route.openshift.io
  resources:
  - routes
  verbs:
  - '*'
- apiGroups:
  - extensions
  resources:
  - deployments
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - monitoring.coreos.com
  resources:
  - servicemonitors
  verbs:
  - get
  - create
- apiGroups:
  - apps
  resourceNames:
  - REPLACE_OPERATOR_NAME
  resources:
  - deployments/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
- apiGroups:
  - apps
  resources:
  - replicasets
  verbs:
  - get
- apiGroups:
  - perceptilabs.com
  resources:
  - '*'
  verbs:
  - '*'
EOF
sed -i "" "s|REPLACE_OPERATOR_NAME|${NAME}|g" ${DEST}/deploy/role.yaml


cat > ${DEST}/deploy/role_binding.yaml <<EOF
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: perceptilabs
subjects:
- kind: ServiceAccount
  name: perceptilabs-operator-sa
roleRef:
  kind: Role
  name: perceptilabs-operator
  apiGroup: rbac.authorization.k8s.io
EOF

# Now that we've generated the set of test configs, go into that directory and run the test
pushd ${DEST}
operator-sdk scorecard --selector='test in (checkspectest,checkstatustest)'
if [ $? -eq 0 ]; then
  DO_DELETE=1
fi
popd

if [ "${DO_DELETE}" == "1" ]; then
  echo "Successful test. Removing intermediate files"
  rm -rf ${DEST}
fi
